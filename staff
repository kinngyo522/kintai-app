<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>勤怠打刻</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />
  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
    import { getFirestore, collection, addDoc, serverTimestamp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";

    const firebaseConfig = {
      apiKey: "AIzaSyAJrXXuNME5hKZLQcpKzkILIDqsISN6IAY",
      authDomain: "kintai-app-cd34b.firebaseapp.com",
      projectId: "kintai-app-cd34b",
      storageBucket: "kintai-app-cd34b.firebasestorage.app",
      messagingSenderId: "781700025980",
      appId: "1:781700025980:web:52a28fd7b6704a5e1d03f9"
    };

    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);

    let employees = JSON.parse(localStorage.getItem("employees") || "[]");

    const updateEmployeeSelects = () => {
      const select = document.getElementById("employee-select");
      const deleteSelect = document.getElementById("employee-delete");
      select.innerHTML = '<option value="">従業員を選択</option>';
      deleteSelect.innerHTML = '<option value="">削除する従業員</option>';
      employees.forEach(name => {
        const opt1 = new Option(name, name);
        const opt2 = new Option(name, name);
        select.add(opt1);
        deleteSelect.add(opt2);
      });
    };

    const saveEmployees = () => {
      localStorage.setItem("employees", JSON.stringify(employees));
      updateEmployeeSelects();
    };

    async function punch(type) {
      const name = document.getElementById("employee-select").value;
      if (!name) return alert("従業員を選択してください");

      try {
        await addDoc(collection(db, "attendance"), {
          name,
          type,
          timestamp: serverTimestamp()
        });
        document.getElementById("status").textContent = `${name}さんの${type === "in" ? "出勤" : "退勤"}を記録しました。`;
      } catch (e) {
        alert("エラーが発生しました");
        console.error(e);
      }
    }

    window.addEventListener("DOMContentLoaded", () => {
      updateEmployeeSelects();

      document.getElementById("add-btn").onclick = () => {
        const name = document.getElementById("new-employee").value.trim();
        if (name && !employees.includes(name)) {
          employees.push(name);
          saveEmployees();
          document.getElementById("new-employee").value = "";
        }
      };

      document.getElementById("delete-btn").onclick = () => {
        const del = document.getElementById("employee-delete").value;
        if (del && confirm(`${del} を削除しますか？`)) {
          employees = employees.filter(e => e !== del);
          saveEmployees();
        }
      };

      document.getElementById("clock-in").onclick = () => punch("in");
      document.getElementById("clock-out").onclick = () => punch("out");

      setInterval(() => {
        const now = new Date();
        document.getElementById("clock").textContent = now.toLocaleTimeString("ja-JP");
        document.getElementById("date").textContent = now.toLocaleDateString("ja-JP", {
          year: 'numeric', month: 'long', day: 'numeric', weekday: 'long'
        });
      }, 1000);
    });
  </script>
</head>
<body class="bg-gray-100 min-h-screen p-4">
  <div class="max-w-2xl mx-auto bg-white p-6 rounded shadow">
    <h1 class="text-2xl font-bold text-indigo-700 mb-4 text-center">勤怠打刻</h1>

    <div class="mb-4">
      <label class="block mb-1 font-semibold">従業員選択</label>
      <select id="employee-select" class="w-full p-2 border rounded"></select>
    </div>

    <div class="flex gap-4 mb-6">
      <button id="clock-in" class="flex-1 bg-blue-600 text-white py-2 rounded hover:bg-blue-700">出勤</button>
      <button id="clock-out" class="flex-1 bg-red-600 text-white py-2 rounded hover:bg-red-700">退勤</button>
    </div>

    <div class="mb-6">
      <div class="text-center bg-gray-100 p-4 rounded">
        <p class="text-sm">現在時刻</p>
        <p id="clock" class="text-2xl font-bold">--:--:--</p>
        <p id="date" class="text-gray-600">--年--月--日</p>
      </div>
    </div>

    <div class="mb-4">
      <label class="block font-semibold mb-1">新規従業員追加</label>
      <div class="flex">
        <input type="text" id="new-employee" class="flex-1 p-2 border rounded-l" placeholder="名前を入力" />
        <button id="add-btn" class="bg-indigo-600 text-white px-4 rounded-r hover:bg-indigo-700">追加</button>
      </div>
    </div>

    <div class="mb-6">
      <label class="block font-semibold mb-1">従業員削除</label>
      <div class="flex">
        <select id="employee-delete" class="flex-1 p-2 border rounded-l"></select>
        <button id="delete-btn" class="bg-red-600 text-white px-4 rounded-r hover:bg-red-700">削除</button>
      </div>
    </div>

    <p id="status" class="text-green-700 font-medium text-center mt-4"></p>
  </div>
</body>
</html>
